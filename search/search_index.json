{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Introduction to CS3213 FSE This module provides the students with foundational knowledge and understanding of different aspects of software engineering, including requirements, modeling, architecture, behavior, environment, software analysis, validation, and verification. It serves as a second software engineering module exposing the students to the mathematical foundations of software engineering while simultaneously supplementing and elaborating the foundations in a semester-long project. Teaching team Lecturer : Abhik Roychoudhury Co-Lecturer : Yannic Noller Tutors : AY 2021/2022: Zhiyu Fan , Kishore R, Jon Chua, Guo Ai AY 2022/2023: Zhiyu Fan , Huang Zhenxin, Christopher Goh, Eris Jacey Masagaca, Ethan Noah Rozario Material Uploaded All lecture materials for CS3213 (AY 2021/2022) have been uploaded; if you are interested in the resource, please check Lecture and Lecture (Project) . Furthermore, we provide material for our semester-long project: a brief overview , the workflow through the framework, and the current project topics that are available to the CS3213 students. Assessment Weightage Project : 45% Final Assessment : 40% Midterm Assessment : 15%","title":"Home"},{"location":"index.html#introduction-to-cs3213-fse","text":"This module provides the students with foundational knowledge and understanding of different aspects of software engineering, including requirements, modeling, architecture, behavior, environment, software analysis, validation, and verification. It serves as a second software engineering module exposing the students to the mathematical foundations of software engineering while simultaneously supplementing and elaborating the foundations in a semester-long project.","title":"Introduction to CS3213 FSE"},{"location":"index.html#teaching-team","text":"Lecturer : Abhik Roychoudhury Co-Lecturer : Yannic Noller Tutors : AY 2021/2022: Zhiyu Fan , Kishore R, Jon Chua, Guo Ai AY 2022/2023: Zhiyu Fan , Huang Zhenxin, Christopher Goh, Eris Jacey Masagaca, Ethan Noah Rozario","title":"Teaching team"},{"location":"index.html#material-uploaded","text":"All lecture materials for CS3213 (AY 2021/2022) have been uploaded; if you are interested in the resource, please check Lecture and Lecture (Project) . Furthermore, we provide material for our semester-long project: a brief overview , the workflow through the framework, and the current project topics that are available to the CS3213 students.","title":"Material Uploaded"},{"location":"index.html#assessment-weightage","text":"Project : 45% Final Assessment : 40% Midterm Assessment : 15%","title":"Assessment Weightage"},{"location":"collaboration.html","text":"If you are a researcher or teaching staff at a university and are interested in adopting our resources for your teaching purpose, please get in touch with abhik@comp.nus.edu.sg .","title":"Collaboration"},{"location":"lecture.html","text":"CS3213 Lecture Material Lecture 1: Introduction slides 1 , slides 2 , recording In this lecture, we introduced the foundations and the project in this course. Additionally, we introduced the field of \"requirements engineering\". Lecture 2: UML slides , recording (part 1) , recording (part 2) In this lecture, we discussed UML semantics, including sequence diagram based formal modeling of the system description beyond scenarios. Lecture 3: State Charts slides , recording In this lecture, we described the nuances of state chart semantics. Lecture 4: Intelligent Tutoring System slides , recording (part 1) , recording (part 2) , recording (part 2) In this lecture, we gave an idea of the area behind the course project - Intelligent tutoring systems. We discussed the general topic, available tools, involved technical challenges, and the feedback issue in intelligent tutoring. Lecture 5: Static Analysis (Part 1 Motivation) slides , recording In this lecture, we discussed program representations such as the Control Flow Graph (CFG). Lecture 6: Static Analysis (Part 2 Program Representation) slides , recording In this lecture, we covered simpler descriptin of static program analysis based on data-flow analysis. Lecture 7: White-box Testing / Test suite estimation slides , recording In this lecture, we discussed white box testing and test-suite estimation. Lecture 8: Mid-term Lecture 9: Debugging slides , recording In this lecture, we continued with our discussions on testing and analysis. Some background material on software debugging was presented, including slicing and fault localisation. Lecture 10: Non-functional issues: Security and Timeliness slides 1 , slides 2 , recording In this lecture, we discussed software performance issues and timing-critical software design. Lecture 11: Invitation Talks slides In this lecture, we had two talks on emerging research topics in automated programming by Dr. Sumit Gulwani and Professor Ilya Sergey . Lecture 12: Revision of topics slides , recording In this lecture, we first continued our discussion on sofware performance aspects, and then recapped previous course topics with some warm-up exercises.","title":"Lecture"},{"location":"lecture.html#cs3213-lecture-material","text":"","title":"CS3213 Lecture Material"},{"location":"lecture.html#lecture-1-introduction","text":"slides 1 , slides 2 , recording In this lecture, we introduced the foundations and the project in this course. Additionally, we introduced the field of \"requirements engineering\".","title":"Lecture 1: Introduction"},{"location":"lecture.html#lecture-2-uml","text":"slides , recording (part 1) , recording (part 2) In this lecture, we discussed UML semantics, including sequence diagram based formal modeling of the system description beyond scenarios.","title":"Lecture 2: UML"},{"location":"lecture.html#lecture-3-state-charts","text":"slides , recording In this lecture, we described the nuances of state chart semantics.","title":"Lecture 3: State Charts"},{"location":"lecture.html#lecture-4-intelligent-tutoring-system","text":"slides , recording (part 1) , recording (part 2) , recording (part 2) In this lecture, we gave an idea of the area behind the course project - Intelligent tutoring systems. We discussed the general topic, available tools, involved technical challenges, and the feedback issue in intelligent tutoring.","title":"Lecture 4: Intelligent Tutoring System"},{"location":"lecture.html#lecture-5-static-analysis-part-1-motivation","text":"slides , recording In this lecture, we discussed program representations such as the Control Flow Graph (CFG).","title":"Lecture 5: Static Analysis (Part 1 Motivation)"},{"location":"lecture.html#lecture-6-static-analysis-part-2-program-representation","text":"slides , recording In this lecture, we covered simpler descriptin of static program analysis based on data-flow analysis.","title":"Lecture 6: Static Analysis (Part 2 Program Representation)"},{"location":"lecture.html#lecture-7-white-box-testing-test-suite-estimation","text":"slides , recording In this lecture, we discussed white box testing and test-suite estimation.","title":"Lecture 7: White-box Testing / Test suite estimation"},{"location":"lecture.html#lecture-8-mid-term","text":"","title":"Lecture 8: Mid-term"},{"location":"lecture.html#lecture-9-debugging","text":"slides , recording In this lecture, we continued with our discussions on testing and analysis. Some background material on software debugging was presented, including slicing and fault localisation.","title":"Lecture 9: Debugging"},{"location":"lecture.html#lecture-10-non-functional-issues-security-and-timeliness","text":"slides 1 , slides 2 , recording In this lecture, we discussed software performance issues and timing-critical software design.","title":"Lecture 10: Non-functional issues: Security and Timeliness"},{"location":"lecture.html#lecture-11-invitation-talks","text":"slides In this lecture, we had two talks on emerging research topics in automated programming by Dr. Sumit Gulwani and Professor Ilya Sergey .","title":"Lecture 11: Invitation Talks"},{"location":"lecture.html#lecture-12-revision-of-topics","text":"slides , recording In this lecture, we first continued our discussion on sofware performance aspects, and then recapped previous course topics with some warm-up exercises.","title":"Lecture 12: Revision of topics"},{"location":"lecture_p.html","text":"CS3213 Lecture (Project Part) Lecture 1: Introduction to Course Project slides In Lecture 1, we introduced the idea and topic of our course projects and explained the logistics of our lab session. Furthermore, we introduced the basics of requirements and their elicitation, as needed for Lecture 2. Lecture 2: Requirements Elicitation slides In Lecture 2, we performed a live requirements elicitation section with real stakeholders of our overall project. The students prepared questions in advance and interviewed the customers. Lecture 3: Requirements Modeling slides In Lecture 3, we discussed the requirements elicitation session performed in Lecture 2 and further discussed the resulting requirements models submitted by the students. We provided a general introduction to software architecture to set foot in the solution space. Lecture 4: Architecture slides In Lecture 4, we provided more information on the existing architecture of our project's framework and illustrated several architectural styles. Lecture 5: Design Planning slides In Lecture 5, we discussed aspects of the module design for each project and introduced essential parts of our baseline implementation as the internal program representation. We further discussed the basics of project planning. Lecture 6: Testing slides In Lecture 6, we discussed the basics of software testing and introduced concepts like equivalence class partitioning and unit testing. Lecture 7: Advanced Testing slides In Lecture 7, we intensified the knowledge from Lecture 6 about software testing. We discussed aspects of testable code and test-driven development. We further started introducing the foundations of debugging. Lecture 8: Debugging slides In Lecture 8, we investigated more debugging approaches and introduced concepts like TRAFFIC, dynamic and static slicing, and statistical fault localization. Lecture 9: Static Analysis slides In Lecture 9, we provided more examples for program slicing and gave a practical introduction to static analysis. Lecture 10: Implementation slides In Lecture 10, we discussed implementation aspects and introduced several notions of clean code. Lecture 11: Integration slides In Lecture 11, we discussed typical problems with software integration and introduced integration strategies and testing concepts. Lecture 12: Summary slides In Lecture 12, we recaped all discussed topics and provided a summary for all project-parts of the lecture. Lecture 13: Final Project Presentations slides In Lecture 13, every student group presented their final outcome and demonstrated their contributions.","title":"Lecture (Project)"},{"location":"lecture_p.html#cs3213-lecture-project-part","text":"","title":"CS3213 Lecture (Project Part)"},{"location":"lecture_p.html#lecture-1-introduction-to-course-project","text":"slides In Lecture 1, we introduced the idea and topic of our course projects and explained the logistics of our lab session. Furthermore, we introduced the basics of requirements and their elicitation, as needed for Lecture 2.","title":"Lecture 1: Introduction to Course Project"},{"location":"lecture_p.html#lecture-2-requirements-elicitation","text":"slides In Lecture 2, we performed a live requirements elicitation section with real stakeholders of our overall project. The students prepared questions in advance and interviewed the customers.","title":"Lecture 2: Requirements Elicitation"},{"location":"lecture_p.html#lecture-3-requirements-modeling","text":"slides In Lecture 3, we discussed the requirements elicitation session performed in Lecture 2 and further discussed the resulting requirements models submitted by the students. We provided a general introduction to software architecture to set foot in the solution space.","title":"Lecture 3: Requirements Modeling"},{"location":"lecture_p.html#lecture-4-architecture","text":"slides In Lecture 4, we provided more information on the existing architecture of our project's framework and illustrated several architectural styles.","title":"Lecture 4: Architecture"},{"location":"lecture_p.html#lecture-5-design-planning","text":"slides In Lecture 5, we discussed aspects of the module design for each project and introduced essential parts of our baseline implementation as the internal program representation. We further discussed the basics of project planning.","title":"Lecture 5: Design Planning"},{"location":"lecture_p.html#lecture-6-testing","text":"slides In Lecture 6, we discussed the basics of software testing and introduced concepts like equivalence class partitioning and unit testing.","title":"Lecture 6: Testing"},{"location":"lecture_p.html#lecture-7-advanced-testing","text":"slides In Lecture 7, we intensified the knowledge from Lecture 6 about software testing. We discussed aspects of testable code and test-driven development. We further started introducing the foundations of debugging.","title":"Lecture 7: Advanced Testing"},{"location":"lecture_p.html#lecture-8-debugging","text":"slides In Lecture 8, we investigated more debugging approaches and introduced concepts like TRAFFIC, dynamic and static slicing, and statistical fault localization.","title":"Lecture 8: Debugging"},{"location":"lecture_p.html#lecture-9-static-analysis","text":"slides In Lecture 9, we provided more examples for program slicing and gave a practical introduction to static analysis.","title":"Lecture 9: Static Analysis"},{"location":"lecture_p.html#lecture-10-implementation","text":"slides In Lecture 10, we discussed implementation aspects and introduced several notions of clean code.","title":"Lecture 10: Implementation"},{"location":"lecture_p.html#lecture-11-integration","text":"slides In Lecture 11, we discussed typical problems with software integration and introduced integration strategies and testing concepts.","title":"Lecture 11: Integration"},{"location":"lecture_p.html#lecture-12-summary","text":"slides In Lecture 12, we recaped all discussed topics and provided a summary for all project-parts of the lecture.","title":"Lecture 12: Summary"},{"location":"lecture_p.html#lecture-13-final-project-presentations","text":"slides In Lecture 13, every student group presented their final outcome and demonstrated their contributions.","title":"Lecture 13: Final Project Presentations"},{"location":"schedule.html","text":"","title":"Schedule"},{"location":"tutors.html","text":"Teaching Team Tutorial Slots The tutorial sessions are arranged for every Thursday, all time slots are listed below Time Group Venue Tutor 10 AM - 11 AM T01 To be updated Yannic Noller 11 AM - 12 AM T02 To be updated Guo Ai 12 AM - 1 PM T03 To be updated Kishore R 1 PM - 2 PM T04 To be updated Zhiyu Fan 2 PM - 3 PM T05 To be updated Jon Chua 3 PM - 4 PM T06 To be updated Jon Chua","title":"Teaching Team"},{"location":"tutors.html#teaching-team","text":"","title":"Teaching Team"},{"location":"tutors.html#tutorial-slots","text":"The tutorial sessions are arranged for every Thursday, all time slots are listed below Time Group Venue Tutor 10 AM - 11 AM T01 To be updated Yannic Noller 11 AM - 12 AM T02 To be updated Guo Ai 12 AM - 1 PM T03 To be updated Kishore R 1 PM - 2 PM T04 To be updated Zhiyu Fan 2 PM - 3 PM T05 To be updated Jon Chua 3 PM - 4 PM T06 To be updated Jon Chua","title":"Tutorial Slots"},{"location":"project/examples.html","text":"","title":"Examples"},{"location":"project/intro.html","text":"Intelligent Tutoring System The high-level idea of the Intelligent Tutoring System is to introduce an automated technique to provide feedback and grading suggestions for programming assignments. As shown in the above figure, for a given programming assignment, the tutor would provide a reference solution and some test cases, while the student would submit a solution and receive feedback. The feedback should go beyond the simple execution of test cases and tell the student where and how to fix the submission. More sophisticated and gradual ways of feedback could also be introduced.","title":"Overview"},{"location":"project/intro.html#intelligent-tutoring-system","text":"The high-level idea of the Intelligent Tutoring System is to introduce an automated technique to provide feedback and grading suggestions for programming assignments. As shown in the above figure, for a given programming assignment, the tutor would provide a reference solution and some test cases, while the student would submit a solution and receive feedback. The feedback should go beyond the simple execution of test cases and tell the student where and how to fix the submission. More sophisticated and gradual ways of feedback could also be introduced.","title":"Intelligent Tutoring System"},{"location":"project/readings.html","text":"","title":"Readings"},{"location":"project/topics.html","text":"Developing such an Intelligent Tutoring System (ITS) includes many conceptual and technical challenges. We summarized some of them into projects, from which the students in CS3213 need to choose one as a group project. Please find below the project summaries as proposed for the students in CS3213 (NUS AY 2021/2022). We group projects by their provided functionalities. Each project has assigned estimated difficulty levels (Low, Medium, High) in the categories: coding (i.e., programming intensity), theoretical complexity (i.e., need for background study), amount of research involved (i.e., be innovative and create something new), and the involvement of HCI (Human-Computer Interaction) aspects. More details can be found in our Assignment 0 . Topic 1 - Parsing Project 1.1 C Parser : Develop a parser to transform C programs into a (provided) common data structure based on the control-flow graph (CFG). Additionally, provide a concretizer, which back-transforms the program in the internal common data structure to a C source file. \u2192 [Coding: High, Theory: Low, Research: -, HCI: -] Project 1.2 Python Parser : Same as 1.1 for Python. \u2192 [Coding: High, Theory: Low, Research: -, HCI: -] Topic 2 \u2013 Aligning / Matching of Programs Project 2.1 CFG-Based Alignment : Develop an automated alignment of the reference program and the submitted program based on the basic blocks of the programs\u2019 control-flow graph (CFG) representation. This also includes the development of an automated mapping for the variables between the reference program and the submitted program. \u2192 [Coding: Medium, Theory: Medium, Research: Low, HCI: -] Topic 3 \u2013 Error Localization / Program Interpretation Project 3.1 C Interpreter : Develop an interpreter that allows to execute a C program with regard to the basic blocks in its CFG. Further, use the provided test cases to identify the root cause of the problem with regard to the basic blocks in the CFG. Implement an error localization that compares the execution traces of a reference program and the submitted program. \u2192 [Coding: High, Theory: Medium, Research: -, HCI: -] Project 3.2 Python Interpreter : same as 3.1 for Python \u2192 [Coding: High, Theory: Medium, Research: -, HCI: -] Project 3.3 Error Localizer : Conduct a literature study on error localization. Develop at least two error localization algorithms from different domains (e.g., statistical fault localization and analysis-based fault localization) for the provided framework and evaluate their efficacy. \u2192 [Coding: Medium, Theory: High, Research: Low, HCI: -] Topic 4 \u2013 Transforming / Repairing Programs Project 4.1 Refactoring-based Repair : Develop a repair workflow that first generates semantic-preserving refactorings of a reference program so that it increases the chances of a structural alignment with a submitted program (see Project 2.1). Afterwards, it uses a matching refactoring to repair the submitted program by mutating program expressions. Strive for a minimal repair which satisfies the failing test case(s). \u2192 [Coding: Medium, Theory: Medium, Research: Medium, HCI: -] Project 4.2 Optimization-based Repair : Develop a repair algorithm that (1) generates local repairs at each basic block by matching the submission and the reference solution, and (2) determines the complete repair (i.e., a subset of local repairs) by using some optimization strategy, which minimizes the overall repair cost. \u2192 [Coding: Medium-High, Theory: High, Research: Low, HCI: -] Project 4.3 Synthesis-based Repair : Develop a repair algorithm that searches for a repair by synthesizing program expressions. The synthesis will be driven by the available components at the specific source location. It requires a specification inference, which results in a repair constraint. \u2192 [Coding: Medium, Theory: High, Research: Medium, HCI: -] Topic 5 \u2013 Feedback Generation Project 5.1 Automated Feedback : Develop a feedback mechanism to summarize all obtained results in an appropriate and comprehensible manner for the user. For example, show root causes of the problems and provide explanation by annotating the code. \u2192 [Coding: Low, Theory: Medium, Research: Medium, HCI: High] Project 5.2 Automated Grading : Develop a automated grading mechanism, which is beyond simple output of passing and failing test cases, e.g., it should take into account the necessary effort for fixing the submitted program. \u2192 [Coding: Low, Theory: High, Research: High, HCI: Low]","title":"Topics"},{"location":"project/topics.html#topic-1-parsing","text":"Project 1.1 C Parser : Develop a parser to transform C programs into a (provided) common data structure based on the control-flow graph (CFG). Additionally, provide a concretizer, which back-transforms the program in the internal common data structure to a C source file. \u2192 [Coding: High, Theory: Low, Research: -, HCI: -] Project 1.2 Python Parser : Same as 1.1 for Python. \u2192 [Coding: High, Theory: Low, Research: -, HCI: -]","title":"Topic 1 - Parsing"},{"location":"project/topics.html#topic-2-aligning-matching-of-programs","text":"Project 2.1 CFG-Based Alignment : Develop an automated alignment of the reference program and the submitted program based on the basic blocks of the programs\u2019 control-flow graph (CFG) representation. This also includes the development of an automated mapping for the variables between the reference program and the submitted program. \u2192 [Coding: Medium, Theory: Medium, Research: Low, HCI: -]","title":"Topic 2 \u2013 Aligning / Matching of Programs"},{"location":"project/topics.html#topic-3-error-localization-program-interpretation","text":"Project 3.1 C Interpreter : Develop an interpreter that allows to execute a C program with regard to the basic blocks in its CFG. Further, use the provided test cases to identify the root cause of the problem with regard to the basic blocks in the CFG. Implement an error localization that compares the execution traces of a reference program and the submitted program. \u2192 [Coding: High, Theory: Medium, Research: -, HCI: -] Project 3.2 Python Interpreter : same as 3.1 for Python \u2192 [Coding: High, Theory: Medium, Research: -, HCI: -] Project 3.3 Error Localizer : Conduct a literature study on error localization. Develop at least two error localization algorithms from different domains (e.g., statistical fault localization and analysis-based fault localization) for the provided framework and evaluate their efficacy. \u2192 [Coding: Medium, Theory: High, Research: Low, HCI: -]","title":"Topic 3 \u2013 Error Localization / Program Interpretation"},{"location":"project/topics.html#topic-4-transforming-repairing-programs","text":"Project 4.1 Refactoring-based Repair : Develop a repair workflow that first generates semantic-preserving refactorings of a reference program so that it increases the chances of a structural alignment with a submitted program (see Project 2.1). Afterwards, it uses a matching refactoring to repair the submitted program by mutating program expressions. Strive for a minimal repair which satisfies the failing test case(s). \u2192 [Coding: Medium, Theory: Medium, Research: Medium, HCI: -] Project 4.2 Optimization-based Repair : Develop a repair algorithm that (1) generates local repairs at each basic block by matching the submission and the reference solution, and (2) determines the complete repair (i.e., a subset of local repairs) by using some optimization strategy, which minimizes the overall repair cost. \u2192 [Coding: Medium-High, Theory: High, Research: Low, HCI: -] Project 4.3 Synthesis-based Repair : Develop a repair algorithm that searches for a repair by synthesizing program expressions. The synthesis will be driven by the available components at the specific source location. It requires a specification inference, which results in a repair constraint. \u2192 [Coding: Medium, Theory: High, Research: Medium, HCI: -]","title":"Topic 4 \u2013 Transforming / Repairing Programs"},{"location":"project/topics.html#topic-5-feedback-generation","text":"Project 5.1 Automated Feedback : Develop a feedback mechanism to summarize all obtained results in an appropriate and comprehensible manner for the user. For example, show root causes of the problems and provide explanation by annotating the code. \u2192 [Coding: Low, Theory: Medium, Research: Medium, HCI: High] Project 5.2 Automated Grading : Develop a automated grading mechanism, which is beyond simple output of passing and failing test cases, e.g., it should take into account the necessary effort for fixing the submitted program. \u2192 [Coding: Low, Theory: High, Research: High, HCI: Low]","title":"Topic 5 \u2013 Feedback Generation"},{"location":"project/workflow.html","text":"The following steps show the intended workflow through the Intelligent Tutoring System (ITS). Note that there are points of variation (static and dynamic) that depend, e.g., on the programming language of the programming assignments and the intended repair strategies. Many of the current components can be implemented in many different ways. Overview The Intelligent Tutoring System (ITS) uses the notion of a pipes-and-filter style to process the submitted program and, finally, to produce feedback for the students and a grading report for the tutor. All components provide corresponding interfaces to the extent that most components can be implemented independently from each other. This architecture also allows us to deploy specific system components as separate services. In this regard, the design borrows concepts from the service-oriented style. For example, we provide students with access to a Parser service that allows them to easily generate the internal CFG-based Program representation to create test cases for their projects. Step 1: Parser Step 2: Syntactic Alignment Step 3: Error Localizer Step 4: Interpreter Step 5: Repair Step 6: Feedback Step 7: Conretization Step 8: Auto-Grading","title":"Workflow"},{"location":"project/workflow.html#overview","text":"The Intelligent Tutoring System (ITS) uses the notion of a pipes-and-filter style to process the submitted program and, finally, to produce feedback for the students and a grading report for the tutor. All components provide corresponding interfaces to the extent that most components can be implemented independently from each other. This architecture also allows us to deploy specific system components as separate services. In this regard, the design borrows concepts from the service-oriented style. For example, we provide students with access to a Parser service that allows them to easily generate the internal CFG-based Program representation to create test cases for their projects.","title":"Overview"},{"location":"project/workflow.html#step-1-parser","text":"","title":"Step 1: Parser"},{"location":"project/workflow.html#step-2-syntactic-alignment","text":"","title":"Step 2: Syntactic Alignment"},{"location":"project/workflow.html#step-3-error-localizer","text":"","title":"Step 3: Error Localizer"},{"location":"project/workflow.html#step-4-interpreter","text":"","title":"Step 4: Interpreter"},{"location":"project/workflow.html#step-5-repair","text":"","title":"Step 5: Repair"},{"location":"project/workflow.html#step-6-feedback","text":"","title":"Step 6: Feedback"},{"location":"project/workflow.html#step-7-conretization","text":"","title":"Step 7: Conretization"},{"location":"project/workflow.html#step-8-auto-grading","text":"","title":"Step 8: Auto-Grading"}]}