{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Introduction to CS3213 FSE Module Description This module will provide the students with foundational knowledge and understanding of different aspects of software engineering including requirements, modelling, architecture, behavior, environment, software analysis, validation and verification. It will serve as a second software engineering module exposing the students to the mathematical foundations of software engineering while simultaneously supplementing and elaborating the foundations in the form of a semester long project. Material Uploaded All materials on CS3213 (AY 2021/2022) have been uploaded, if you are interested in the resource, please check Lecture and Project . Collaboration If you are a researcher or teaching staff in universities who are interested in adpating our resources for your own teaching purpose, please contact abhik@comp.nus.edu.sg .","title":"Home"},{"location":"index.html#introduction-to-cs3213-fse","text":"","title":"Introduction to CS3213 FSE"},{"location":"index.html#module-description","text":"This module will provide the students with foundational knowledge and understanding of different aspects of software engineering including requirements, modelling, architecture, behavior, environment, software analysis, validation and verification. It will serve as a second software engineering module exposing the students to the mathematical foundations of software engineering while simultaneously supplementing and elaborating the foundations in the form of a semester long project.","title":"Module Description"},{"location":"index.html#material-uploaded","text":"All materials on CS3213 (AY 2021/2022) have been uploaded, if you are interested in the resource, please check Lecture and Project .","title":"Material Uploaded"},{"location":"index.html#collaboration","text":"If you are a researcher or teaching staff in universities who are interested in adpating our resources for your own teaching purpose, please contact abhik@comp.nus.edu.sg .","title":"Collaboration"},{"location":"about.html","text":"About CS3213 Module Description This module will provide the students with foundational knowledge and understanding of different aspects of software engineering including requirements, modelling, architecture, behavior, environment, software analysis, validation and verification. It will serve as a second software engineering module exposing the students to the mathematical foundations of software engineering while simultaneously supplementing and elaborating the foundations in the form of a semester long project. Teaching team Lecturer : Abhik Roychoudhury Co-Lecturer : Yannic Noller Tutors : AY 2021/2022: Zhiyu Fan , Kishore R, Jon Chua, Guo Ai AY 2022/2023: Zhiyu Fan , Huang Zhenxin, Christopher Goh, Eris Jacey Masagaca, Ethan Noah Rozario Assessment Weightage Project : 45% Final Assessment : 40% Midterm Assessment : 15%","title":"About CS3213"},{"location":"about.html#about-cs3213","text":"","title":"About CS3213"},{"location":"about.html#module-description","text":"This module will provide the students with foundational knowledge and understanding of different aspects of software engineering including requirements, modelling, architecture, behavior, environment, software analysis, validation and verification. It will serve as a second software engineering module exposing the students to the mathematical foundations of software engineering while simultaneously supplementing and elaborating the foundations in the form of a semester long project.","title":"Module Description"},{"location":"about.html#teaching-team","text":"Lecturer : Abhik Roychoudhury Co-Lecturer : Yannic Noller Tutors : AY 2021/2022: Zhiyu Fan , Kishore R, Jon Chua, Guo Ai AY 2022/2023: Zhiyu Fan , Huang Zhenxin, Christopher Goh, Eris Jacey Masagaca, Ethan Noah Rozario","title":"Teaching team"},{"location":"about.html#assessment-weightage","text":"Project : 45% Final Assessment : 40% Midterm Assessment : 15%","title":"Assessment Weightage"},{"location":"assignment_overview.html","text":"Assignment Overview More information are coming soon! Assignment 0 ( pdf ) As preparation for the course projects, we present the overall system idea and the available project topics. You can already make yourself familiar with the topics, conduct some readings and collect background knowledge. This way you save time during the semester, and you can make an informed decision when selecting a topic. Furthermore, you can already start forming groups and select a corresponding project. Note: There will be no marks for this sheet, but finding a group and a project will be necessary to participate in the lab!","title":"Assignment Overview"},{"location":"assignment_overview.html#assignment-overview","text":"More information are coming soon!","title":"Assignment Overview"},{"location":"assignment_overview.html#assignment-0-pdf","text":"As preparation for the course projects, we present the overall system idea and the available project topics. You can already make yourself familiar with the topics, conduct some readings and collect background knowledge. This way you save time during the semester, and you can make an informed decision when selecting a topic. Furthermore, you can already start forming groups and select a corresponding project. Note: There will be no marks for this sheet, but finding a group and a project will be necessary to participate in the lab!","title":"Assignment 0 (pdf)"},{"location":"lecture.html","text":"CS3213 Lecture Material Lecture 12: Revision of topics slides , records In this lecture, we first continued discussion on time aspects perfermance, and then went through some warm-up exercises for topics in previous lectures. Lecture 11: Invitation Talks slides , records In this lecture, we had two talks on emerging research topics in automated programming by Dr Sumit Gulwani and Professor Ilya Sergey. Lecture 10: Non-functional issues: Security and Timeliness slides 1 , slides 2 , records In this lecture, we discussed software performance issues, and timing-critical software design. Lecture 9: Debugging slides 1 , records In this lecture, we continued with our discussions on testing and analysis. Some background material on software debugging was presented, including slicing and fault localisation. Lecture 8: Mid-term Lecture 7: White-box Testing / Test suite estimation slides , records In this lecture, we discussed white box testing and test-suite estimation. Lecture 6: Static Analysis (Part 2 Program Representation) slides , records In this lecture, we covered simpler descriptin of static program analysis based on data-flow analysis. Lecture 5: Static Analysis (Part 1 Motivation) slides , records In this lecture, we discussed program representations such as Control Flow Graph. Lecture 4: Intelligent Tutoring System slides , records In this lecture, we gave an idea of the area behind course project - Intelligent tutoring systems. The area, tools available, problems involved, the feedback issue in intelligent tutoring was discussed. Lecture 3: State Charts slides , records In this lecture, we described the nuances of Statechart semantics. Lecture 2: UML slides , records In this lecture, we discussed UML semantics, including Sequence Diagram based formal modeling of the system description beyond scenarios. Lecture 0-1: Module Introduction and Requirements slides 1 , slides 2 , records In this lecture, we introduced the foundations and project in this module, we also started the module with \"requirement engineering\".","title":"Lecture"},{"location":"lecture.html#cs3213-lecture-material","text":"","title":"CS3213 Lecture Material"},{"location":"lecture.html#lecture-12-revision-of-topics","text":"slides , records In this lecture, we first continued discussion on time aspects perfermance, and then went through some warm-up exercises for topics in previous lectures.","title":"Lecture 12: Revision of topics"},{"location":"lecture.html#lecture-11-invitation-talks","text":"slides , records In this lecture, we had two talks on emerging research topics in automated programming by Dr Sumit Gulwani and Professor Ilya Sergey.","title":"Lecture 11: Invitation Talks"},{"location":"lecture.html#lecture-10-non-functional-issues-security-and-timeliness","text":"slides 1 , slides 2 , records In this lecture, we discussed software performance issues, and timing-critical software design.","title":"Lecture 10: Non-functional issues: Security and Timeliness"},{"location":"lecture.html#lecture-9-debugging","text":"slides 1 , records In this lecture, we continued with our discussions on testing and analysis. Some background material on software debugging was presented, including slicing and fault localisation.","title":"Lecture 9: Debugging"},{"location":"lecture.html#lecture-8-mid-term","text":"","title":"Lecture 8: Mid-term"},{"location":"lecture.html#lecture-7-white-box-testing-test-suite-estimation","text":"slides , records In this lecture, we discussed white box testing and test-suite estimation.","title":"Lecture 7: White-box Testing / Test suite estimation"},{"location":"lecture.html#lecture-6-static-analysis-part-2-program-representation","text":"slides , records In this lecture, we covered simpler descriptin of static program analysis based on data-flow analysis.","title":"Lecture 6: Static Analysis (Part 2 Program Representation)"},{"location":"lecture.html#lecture-5-static-analysis-part-1-motivation","text":"slides , records In this lecture, we discussed program representations such as Control Flow Graph.","title":"Lecture 5: Static Analysis (Part 1 Motivation)"},{"location":"lecture.html#lecture-4-intelligent-tutoring-system","text":"slides , records In this lecture, we gave an idea of the area behind course project - Intelligent tutoring systems. The area, tools available, problems involved, the feedback issue in intelligent tutoring was discussed.","title":"Lecture 4: Intelligent Tutoring System"},{"location":"lecture.html#lecture-3-state-charts","text":"slides , records In this lecture, we described the nuances of Statechart semantics.","title":"Lecture 3: State Charts"},{"location":"lecture.html#lecture-2-uml","text":"slides , records In this lecture, we discussed UML semantics, including Sequence Diagram based formal modeling of the system description beyond scenarios.","title":"Lecture 2: UML"},{"location":"lecture.html#lecture-0-1-module-introduction-and-requirements","text":"slides 1 , slides 2 , records In this lecture, we introduced the foundations and project in this module, we also started the module with \"requirement engineering\".","title":"Lecture 0-1: Module Introduction and Requirements"},{"location":"lecture_p.html","text":"CS3213 Lecture (Project Part) Lecture 13: Final Project Presentations slides In Lecture 13, every student group presented their final outcome and demonstrated their contributions. Lecture 12: Summary slides In Lecture 12, we recaped all discussed topics and provided a summary for all project-parts of the lecture. Lecture 11: Integration slides In Lecture 11, we discussed typical problems with software integration and introduced integration strategies and testing concepts. Lecture 10: Implementation slides In Lecture 10, we discussed implementation aspects and introduced several notions of clean code. Lecture 9: Static Analysis slides In Lecture 9, we provided more examples for program slicing and gave a practical introduction to static analysis. Lecture 8: Debugging slides In Lecture 8, we investigated more debugging approaches and introduced concepts like TRAFFIC, dynamic and static slicing, and statistical fault localization. Lecture 7: Advanced Testing slides In Lecture 7, we intensified the knowledge from Lecture 6 about software testing. We discussed aspects of testable code and test-driven development. We further started introducing the foundations of debugging. Lecture 6: Testing slides In Lecture 6, we discussed the basics of software testing and introduced concepts like equivalence class partitioning and unit testing. Lecture 5: Design Planning slides In Lecture 5, we discussed aspects of the module design for each project and introduced essential parts of our baseline implementation as the internal program representation. We further discussed the basics of project planning. Lecture 4: Architecture slides In Lecture 4, we provided more information on the existing architecture of our project's framework and illustrated several architectural styles. Lecture 3: Requirements Modeling slides In Lecture 3, we discussed the requirements elicitation session performed in Lecture 2 and further discussed the resulting requirements models submitted by the students. We provided a general introduction to software architecture to set foot in the solution space. Lecture 2: Requirements Elicitation slides In Lecture 2, we performed a live requirements elicitation section with real stakeholders of our overall project. The students prepared questions in advance and interviewed the customers. Lecture 1: Introduction to Course Project slides In Lecture 1, we introduced the idea and topic of our course projects and explained the logistics of our lab session. Furthermore, we introduced the basics of requirements and their elicitation, as needed for Lecture 2.","title":"CS3213 Lecture (Project Part)"},{"location":"lecture_p.html#cs3213-lecture-project-part","text":"","title":"CS3213 Lecture (Project Part)"},{"location":"lecture_p.html#lecture-13-final-project-presentations","text":"slides In Lecture 13, every student group presented their final outcome and demonstrated their contributions.","title":"Lecture 13: Final Project Presentations"},{"location":"lecture_p.html#lecture-12-summary","text":"slides In Lecture 12, we recaped all discussed topics and provided a summary for all project-parts of the lecture.","title":"Lecture 12: Summary"},{"location":"lecture_p.html#lecture-11-integration","text":"slides In Lecture 11, we discussed typical problems with software integration and introduced integration strategies and testing concepts.","title":"Lecture 11: Integration"},{"location":"lecture_p.html#lecture-10-implementation","text":"slides In Lecture 10, we discussed implementation aspects and introduced several notions of clean code.","title":"Lecture 10: Implementation"},{"location":"lecture_p.html#lecture-9-static-analysis","text":"slides In Lecture 9, we provided more examples for program slicing and gave a practical introduction to static analysis.","title":"Lecture 9: Static Analysis"},{"location":"lecture_p.html#lecture-8-debugging","text":"slides In Lecture 8, we investigated more debugging approaches and introduced concepts like TRAFFIC, dynamic and static slicing, and statistical fault localization.","title":"Lecture 8: Debugging"},{"location":"lecture_p.html#lecture-7-advanced-testing","text":"slides In Lecture 7, we intensified the knowledge from Lecture 6 about software testing. We discussed aspects of testable code and test-driven development. We further started introducing the foundations of debugging.","title":"Lecture 7: Advanced Testing"},{"location":"lecture_p.html#lecture-6-testing","text":"slides In Lecture 6, we discussed the basics of software testing and introduced concepts like equivalence class partitioning and unit testing.","title":"Lecture 6: Testing"},{"location":"lecture_p.html#lecture-5-design-planning","text":"slides In Lecture 5, we discussed aspects of the module design for each project and introduced essential parts of our baseline implementation as the internal program representation. We further discussed the basics of project planning.","title":"Lecture 5: Design Planning"},{"location":"lecture_p.html#lecture-4-architecture","text":"slides In Lecture 4, we provided more information on the existing architecture of our project's framework and illustrated several architectural styles.","title":"Lecture 4: Architecture"},{"location":"lecture_p.html#lecture-3-requirements-modeling","text":"slides In Lecture 3, we discussed the requirements elicitation session performed in Lecture 2 and further discussed the resulting requirements models submitted by the students. We provided a general introduction to software architecture to set foot in the solution space.","title":"Lecture 3: Requirements Modeling"},{"location":"lecture_p.html#lecture-2-requirements-elicitation","text":"slides In Lecture 2, we performed a live requirements elicitation section with real stakeholders of our overall project. The students prepared questions in advance and interviewed the customers.","title":"Lecture 2: Requirements Elicitation"},{"location":"lecture_p.html#lecture-1-introduction-to-course-project","text":"slides In Lecture 1, we introduced the idea and topic of our course projects and explained the logistics of our lab session. Furthermore, we introduced the basics of requirements and their elicitation, as needed for Lecture 2.","title":"Lecture 1: Introduction to Course Project"},{"location":"schedule.html","text":"","title":"Schedule"},{"location":"tutors.html","text":"Teaching Team Tutorial Slots The tutorial sessions are arranged for every Thursday, all time slots are listed below Time Group Venue Tutor 10 AM - 11 AM T01 To be updated Yannic Noller 11 AM - 12 AM T02 To be updated Guo Ai 12 AM - 1 PM T03 To be updated Kishore R 1 PM - 2 PM T04 To be updated Zhiyu Fan 2 PM - 3 PM T05 To be updated Jon Chua 3 PM - 4 PM T06 To be updated Jon Chua","title":"Teaching Team"},{"location":"tutors.html#teaching-team","text":"","title":"Teaching Team"},{"location":"tutors.html#tutorial-slots","text":"The tutorial sessions are arranged for every Thursday, all time slots are listed below Time Group Venue Tutor 10 AM - 11 AM T01 To be updated Yannic Noller 11 AM - 12 AM T02 To be updated Guo Ai 12 AM - 1 PM T03 To be updated Kishore R 1 PM - 2 PM T04 To be updated Zhiyu Fan 2 PM - 3 PM T05 To be updated Jon Chua 3 PM - 4 PM T06 To be updated Jon Chua","title":"Tutorial Slots"},{"location":"project/examples.html","text":"","title":"Examples"},{"location":"project/intro.html","text":"Intelligent Tutoring System The high-level idea of the Intelligent Tutoring System is to introduce an automated technique to provide feedback and grading suggestions for programming assignments. As shown in above figure, for a given programming assignment, the tutor would provide a reference solution and some test cases, while the student would submit a solution and would receive feedback for that. The feedback should go beyond the simple execution of test cases, but should tell the student where and how to fix the submission. More sophisticated and gradual ways of feedback could be also introduced. Developing such a system includes many conceptual and technical challenges. We summarized some of them into projects, from which you will need to choose one for this course. Please find below a collection of all projects, and more detailed descriptions on the following pages. We group projects by their provided functionalities. Each project has assigned estimated difficulty levels (Low, Medium, High) in the categories: coding (i.e., programming intensity), theoretical complexity (i.e., need for background study), amount of research involved (i.e., be innovative and create something new), and the involvement of HCI (Human-Computer Interaction) aspects. Workflow Project List Parser Interpreter Alignment Repair Feedback","title":"Introduction"},{"location":"project/intro.html#intelligent-tutoring-system","text":"The high-level idea of the Intelligent Tutoring System is to introduce an automated technique to provide feedback and grading suggestions for programming assignments. As shown in above figure, for a given programming assignment, the tutor would provide a reference solution and some test cases, while the student would submit a solution and would receive feedback for that. The feedback should go beyond the simple execution of test cases, but should tell the student where and how to fix the submission. More sophisticated and gradual ways of feedback could be also introduced. Developing such a system includes many conceptual and technical challenges. We summarized some of them into projects, from which you will need to choose one for this course. Please find below a collection of all projects, and more detailed descriptions on the following pages. We group projects by their provided functionalities. Each project has assigned estimated difficulty levels (Low, Medium, High) in the categories: coding (i.e., programming intensity), theoretical complexity (i.e., need for background study), amount of research involved (i.e., be innovative and create something new), and the involvement of HCI (Human-Computer Interaction) aspects.","title":"Intelligent Tutoring System"},{"location":"project/intro.html#workflow","text":"","title":"Workflow"},{"location":"project/intro.html#project-list","text":"Parser Interpreter Alignment Repair Feedback","title":"Project List"},{"location":"project/readings.html","text":"","title":"Postman"}]}